# Makefile for KLT CUDA Implementation
# For University GPU Environment
# Author: KLT CUDA Project
# Date: 2024

# Compiler settings
CC = gcc
NVCC = nvcc
AR = ar

# CUDA settings - adjust for your university's GPU
# Common GPU architectures:
# - sm_50: Maxwell (GTX 900 series)
# - sm_60: Pascal (GTX 1000 series) 
# - sm_70: Volta (V100)
# - sm_75: Turing (RTX 2000 series, Tesla T4)
# - sm_80: Ampere (RTX 3000 series, A100)
# - sm_86: Ampere (RTX 3000 series)
# - sm_89: Ada Lovelace (RTX 4000 series)

# Auto-detect GPU architecture or set manually
# Uncomment the line that matches your university's GPU:
# CUDA_ARCH = -arch=sm_50   # For Maxwell GPUs
# CUDA_ARCH = -arch=sm_60   # For Pascal GPUs  
# CUDA_ARCH = -arch=sm_70   # For Volta GPUs
# CUDA_ARCH = -arch=sm_75   # For Turing GPUs (Tesla T4, RTX 2000)
CUDA_ARCH = -arch=sm_80   # For Ampere GPUs (A100, RTX 3000)
# CUDA_ARCH = -arch=sm_86   # For Ampere GPUs (RTX 3000)
# CUDA_ARCH = -arch=sm_89   # For Ada Lovelace GPUs (RTX 4000)

# Compiler flags
CFLAGS = -O3 -Wall -DNDEBUG
CUDAFLAGS = -O3 -std=c++11 $(CUDA_ARCH) -Xcompiler -fPIC
INCLUDES = -I./include
LIBRARIES = -lm

# Directories
SRC_DIR = src
BUILD_DIR = build
INCLUDE_DIR = include
INPUT_DIR = input
OUTPUT_DIR = output

# Source files
CPU_SOURCES = $(SRC_DIR)/convolve.c \
              $(SRC_DIR)/error.c \
              $(SRC_DIR)/pnmio.c \
              $(SRC_DIR)/pyramid.c \
              $(SRC_DIR)/selectGoodFeatures.c \
              $(SRC_DIR)/storeFeatures.c \
              $(SRC_DIR)/trackFeatures.c \
              $(SRC_DIR)/klt.c \
              $(SRC_DIR)/klt_util.c \
              $(SRC_DIR)/writeFeatures.c

CUDA_SOURCES = $(SRC_DIR)/convolve_cuda.cu

EXAMPLES = $(SRC_DIR)/example1.c \
           $(SRC_DIR)/example2.c \
           $(SRC_DIR)/example3.c \
           $(SRC_DIR)/example4.c \
           $(SRC_DIR)/example5.c

# Object files
CPU_OBJECTS = $(CPU_SOURCES:$(SRC_DIR)/%.c=$(BUILD_DIR)/%.o)
CUDA_OBJECTS = $(CUDA_SOURCES:$(SRC_DIR)/%.cu=$(BUILD_DIR)/%.o)

# Targets
LIBRARY = $(BUILD_DIR)/libklt.a
CUDA_PROGRAM = convolve_cuda
EXAMPLES_BIN = example1 example2 example3 example4 example5

# Default target
all: setup $(LIBRARY) $(CUDA_PROGRAM) $(EXAMPLES_BIN)

# Create necessary directories
setup:
	@echo "Setting up build environment..."
	@mkdir -p $(BUILD_DIR)
	@mkdir -p $(OUTPUT_DIR)
	@echo "✅ Directories created"

# Compile CPU source files
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c
	@echo "Compiling $<..."
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Compile CUDA source files
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cu
	@echo "Compiling CUDA $<..."
	$(NVCC) $(CUDAFLAGS) $(INCLUDES) -c $< -o $@

# Create static library
$(LIBRARY): $(CPU_OBJECTS)
	@echo "Creating static library..."
	$(AR) rcs $@ $^
	@echo "✅ Library created: $@"

# Compile CUDA convolution program
$(CUDA_PROGRAM): $(SRC_DIR)/convolve_cuda.cu
	@echo "Compiling CUDA convolution program..."
	$(NVCC) $(CUDAFLAGS) $(INCLUDES) -o $@ $< $(LIBRARIES)
	@echo "✅ CUDA program created: $@"

# Compile example programs
example1: $(LIBRARY)
	@echo "Compiling example1..."
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $(SRC_DIR)/$@.c -L$(BUILD_DIR) -lklt $(LIBRARIES)

example2: $(LIBRARY)
	@echo "Compiling example2..."
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $(SRC_DIR)/$@.c -L$(BUILD_DIR) -lklt $(LIBRARIES)

example3: $(LIBRARY)
	@echo "Compiling example3..."
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $(SRC_DIR)/$@.c -L$(BUILD_DIR) -lklt $(LIBRARIES)

example4: $(LIBRARY)
	@echo "Compiling example4..."
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $(SRC_DIR)/$@.c -L$(BUILD_DIR) -lklt $(LIBRARIES)

example5: $(LIBRARY)
	@echo "Compiling example5..."
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $(SRC_DIR)/$@.c -L$(BUILD_DIR) -lklt $(LIBRARIES)

# Test CUDA program
test-cuda: $(CUDA_PROGRAM)
	@echo "Testing CUDA convolution..."
	@echo "=========================="
	./$(CUDA_PROGRAM)

# Test complete KLT algorithm
test-klt: example3
	@echo "Testing complete KLT algorithm..."
	@echo "================================"
	./example3

# Run performance comparison
benchmark: $(CUDA_PROGRAM) example3
	@echo "Running performance benchmark..."
	@echo "=============================="
	@echo "CUDA Convolution Test:"
	@time ./$(CUDA_PROGRAM)
	@echo ""
	@echo "Complete KLT Algorithm:"
	@time ./example3

# Check GPU information
gpu-info:
	@echo "GPU Information:"
	@echo "================"
	@nvidia-smi --query-gpu=name,compute_cap,memory.total --format=csv,noheader,nounits || echo "nvidia-smi not available"

# Clean build files
clean:
	@echo "Cleaning build files..."
	rm -rf $(BUILD_DIR)
	rm -f $(CUDA_PROGRAM) $(EXAMPLES_BIN)
	rm -f $(OUTPUT_DIR)/*.ppm $(OUTPUT_DIR)/*.txt $(OUTPUT_DIR)/*.ft
	@echo "✅ Cleaned"

# Clean everything including output files
distclean: clean
	@echo "Cleaning all generated files..."
	rm -rf $(OUTPUT_DIR)
	@echo "✅ Dist cleaned"

# Install (copy to system directories)
install: all
	@echo "Installing KLT CUDA..."
	@echo "======================"
	@echo "Note: This requires sudo privileges"
	@echo "Copying library to /usr/local/lib..."
	@sudo cp $(LIBRARY) /usr/local/lib/
	@echo "Copying headers to /usr/local/include/klt..."
	@sudo mkdir -p /usr/local/include/klt
	@sudo cp $(INCLUDE_DIR)/*.h /usr/local/include/klt/
	@echo "✅ Installed"

# Uninstall
uninstall:
	@echo "Uninstalling KLT CUDA..."
	@echo "========================"
	@sudo rm -f /usr/local/lib/libklt.a
	@sudo rm -rf /usr/local/include/klt
	@echo "✅ Uninstalled"

# Show help
help:
	@echo "KLT CUDA Makefile Help"
	@echo "======================"
	@echo ""
	@echo "Available targets:"
	@echo "  all          - Build everything (default)"
	@echo "  setup        - Create build directories"
	@echo "  $(CUDA_PROGRAM) - Build CUDA convolution program"
	@echo "  example1-5   - Build individual example programs"
	@echo "  test-cuda    - Test CUDA convolution"
	@echo "  test-klt     - Test complete KLT algorithm"
	@echo "  benchmark   - Run performance comparison"
	@echo "  gpu-info     - Show GPU information"
	@echo "  clean        - Remove build files"
	@echo "  distclean    - Remove all generated files"
	@echo "  install      - Install to system (requires sudo)"
	@echo "  uninstall    - Remove from system"
	@echo "  help         - Show this help"
	@echo ""
	@echo "GPU Architecture Settings:"
	@echo "  Edit CUDA_ARCH in Makefile to match your GPU:"
	@echo "  - sm_50: Maxwell (GTX 900 series)"
	@echo "  - sm_60: Pascal (GTX 1000 series)"
	@echo "  - sm_70: Volta (V100)"
	@echo "  - sm_75: Turing (Tesla T4, RTX 2000)"
	@echo "  - sm_80: Ampere (A100, RTX 3000)"
	@echo "  - sm_86: Ampere (RTX 3000)"
	@echo "  - sm_89: Ada Lovelace (RTX 4000)"

# Show current configuration
config:
	@echo "Current Configuration:"
	@echo "====================="
	@echo "CC: $(CC)"
	@echo "NVCC: $(NVCC)"
	@echo "CUDA_ARCH: $(CUDA_ARCH)"
	@echo "CFLAGS: $(CFLAGS)"
	@echo "CUDAFLAGS: $(CUDAFLAGS)"
	@echo "INCLUDES: $(INCLUDES)"
	@echo "LIBRARIES: $(LIBRARIES)"

# Phony targets
.PHONY: all setup test-cuda test-klt benchmark gpu-info clean distclean install uninstall help config

# Print build information
info:
	@echo "KLT CUDA Build Information"
	@echo "========================="
	@echo "Source files: $(words $(CPU_SOURCES)) CPU + $(words $(CUDA_SOURCES)) CUDA"
	@echo "Build directory: $(BUILD_DIR)"
	@echo "Output directory: $(OUTPUT_DIR)"
	@echo "Library: $(LIBRARY)"
	@echo "CUDA program: $(CUDA_PROGRAM)"
	@echo "Examples: $(EXAMPLES_BIN)"
